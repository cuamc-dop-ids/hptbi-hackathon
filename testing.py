################################################################################
#               HACKATHON PARTICIPANTS -- DO NOT EDIT THIS FILE                #
################################################################################

import sys
import time
import pickle
import numpy
import pathlib

VERSION = str(sys.argv[0])
testing_data = pathlib.Path("./csvs/testing.csv")
USE_TESTING_DATA = testing_data.exists()

################################################################################
# source scripts - need this to prep data and have access to the predict methods
exec(open("prepare_mortality_data.py").read())
exec(open("prepare_fss_data.py").read())
exec(open("mortality_model.py").read())
exec(open("fss_model.py").read())

evaluation_file = open("./output/evaluation.txt", "a")

################################################################################
# import the trained models
trained_mortality_model = pickle.load(open("./output/trained_mortality_model.pickle", "rb"))
trained_fss_model       = pickle.load(open("./output/trained_fss_model.pickle", "rb"))

################################################################################
# import and prepare the training data set
tic = time.time()
m_data = eval("prepare_mortality_data(training = True)")
toc = time.time()

out = "seconds elapsed to prepare mortality training data | " + str(toc - tic) + "\n"
evaluation_file.write(out)

tic = time.time()
f_data = eval("prepare_fss_data(training = True)")
toc = time.time()

out = "seconds elapsed to prepare fss training data | " + str(toc - tic) + "\n"
evaluation_file.write(out)

################################################################################
# Mortality Prediction
tic = time.time()
predicted_mortality = predict_mortality(trained_mortality_model, m_data)
numpy.savetxt("./output/predicted_mortality_training.dat", predicted_mortality, fmt = "%s")
toc = time.time()

out = "seconds elapsed to predict mortality on training data | " + str(toc - tic) + "\n"
evaluation_file.write(out)

# FSS Prediction
tic = time.time()
predicted_fss = predict_fss(trained_fss_model, f_data)
numpy.savetxt("./output/predicted_fss_training.dat", predicted_fss, fmt = "%s")
toc = time.time()

out = "seconds elapsed to predict fss on training data | " + str(toc - tic) + "\n"
evaluation_file.write(out)

if USE_TESTING_DATA:
    tic = time.time()
    m_data = eval("prepare_mortality_data(training = False)")
    toc = time.time()

    out = "seconds elapsed to prepare mortality testing data | " + str(toc - tic) + "\n"
    evaluation_file.write(out)

    tic = time.time()
    f_data = eval("prepare_fss_data(training = False)")
    toc = time.time()

    out = "seconds elapsed to prepare fss testing data | " + str(toc - tic) + "\n"
    evaluation_file.write(out)

    # Mortality Prediction
    tic = time.time()
    predicted_mortality = predict_mortality(trained_mortality_model, m_data)
    numpy.savetxt("./output/predicted_mortality_testing.dat", predicted_mortality, fmt = "%s")
    toc = time.time()

    out = "seconds elapsed to predict mortality on testing data | " + str(toc - tic) + "\n"
    evaluation_file.write(out)

    # FSS Prediction
    tic = time.time()
    predicted_fss = predict_fss(trained_fss_model, f_data)
    numpy.savetxt("./output/predicted_fss_testing.dat", predicted_fss, fmt = "%s")
    toc = time.time()

    out = "seconds elapsed to predict fss on testing data | " + str(toc - tic) + "\n"
    evaluation_file.write(out)

################################################################################
evaluation_file.close()

################################################################################
#                                 End of File                                  #
################################################################################

